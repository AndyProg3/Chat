import base64
import hashlib
from Crypto import Random
from Crypto.Cipher import AES
import random
import time

class Encryption(object):
    """
        a - random private key (prime)
        g - public key (prime)
        p - random public key (prime)

        A = g ** a % p
        B - outside key

        s = B ** a % p

        key = hash(s + phrase)
    """

    def __init__(self):
        self.a, self.p = self.__createRandomKeys()
        self.bs = AES.block_size
        self.g = 3331
        
        self.A = (self.g ** self.a) % self.p

    def getA(self):
        return self.A

    def makeFinalKey(self, outsideKey):
        s = outsideKey ** self.a % self.p
        self.key = hashlib.sha256((str(s) + "System Of A Down").encode()).digest()


    def __createRandomKeys(self):
        primes = [1009, 1117, 1223, 1327, 1429, 1531, 1637, 1741, 1847, 1949, 2053, 2161, 2267, 2371, 2473, 2579, 2683, 2789, 2897, 2999, 3109, 3217, 3319, 3433, 3539, 3643, 3761, 3863, 3967, 4073, 4177, 4283, 4391, 4493, 4597, 
            4703, 4813, 4919, 5021, 5147, 5261, 5381, 5483, 5591, 5693, 5801, 5903, 6007, 6113, 6217, 6323, 6427, 6529, 6637, 6761, 6863, 6967, 7069, 7177, 7283, 7393, 7499, 7603, 7717, 7823, 7927, 8039, 8147, 8263, 8369, 8501, 8609, 8713, 8819, 8923, 9029, 9133, 9239, 9341, 9461, 9587, 9689, 9791, 9901, 10007, 10111, 10223, 10331, 10433, 10559, 10663, 10771, 10883, 10987, 11093, 11197, 11299, 11411, 11519, 11621, 11731, 11833, 11939, 12041, 12143, 12251, 12373, 12479, 12583, 12689, 12791, 12893, 13001, 13103, 13217, 13327, 13441, 13553, 13669, 13781, 13883, 13997, 14107, 14221, 14323, 14431, 14533, 14639, 14741, 14843, 14947, 15053, 15161, 15263, 15373, 15493, 15601, 15727, 15859, 15971, 16073, 16183, 16301, 16411, 16519, 16631, 16741, 16843, 
            16963, 17077, 17183, 17291, 17393, 17497, 17599, 17707, 17827, 17929, 18041, 18143, 18251, 18353, 18457, 18583, 18691, 18793, 18899, 19001, 19121, 19231, 19333, 19441, 19543, 19661, 19763, 19867, 19973, 20089, 20201, 20323, 20431, 20533, 20639, 20743, 20849, 20959, 21061, 21163, 21269, 21377, 21481, 21587, 21701, 21803, 21911, 22013, 22123, 22229, 22343, 22447, 22549, 22651, 22769, 22871, 22973, 23081, 23189, 23291, 23399, 23509, 23623, 23741, 23857, 23971, 24077, 24179, 24281, 24391, 24499, 24611, 24733, 24841, 24943, 25057, 25163, 25301, 25409, 25523, 25633, 25741, 25847, 25951, 26053, 26161, 26263, 26371, 26479, 26591, 26693, 26801, 26903, 27011, 27127, 27239, 27361, 27479, 27581, 27689, 27791, 27893, 27997, 28099, 28201, 28307, 
            28409, 28513, 28619, 28723, 28837, 28949, 29059, 29167, 29269, 29383, 29501, 29611, 29717, 29819, 29921, 30029, 30133, 30241, 30347, 30449, 30553, 30661, 30763, 30869, 30971, 31079, 31181, 31307, 31469, 31573, 31687, 31793, 31907, 32009, 32117, 32233, 32341, 32443, 32561, 32687, 32789, 32909, 33013, 33119, 33223, 33329, 33457, 33563, 33679, 33791, 33893, 33997, 34123, 34231, 34337, 34439, 34543, 34649, 34757, 34871, 34981, 35083, 35201, 35311, 35419, 35521, 35671, 35797, 35899, 36007, 36109, 36217, 36319, 36433, 36541, 36643, 36749, 36857, 36973, 37087, 37189, 37307, 37409, 37511, 37619, 37747, 37853, 37957, 38069, 38177, 38281, 38393, 38501, 38603, 38707, 38821, 38923, 39041, 39157, 39293, 39397, 39499, 39607, 39709, 39821, 39929, 
            40031, 40151, 40253, 40357, 40459, 40577, 40693, 40801, 40903, 41011, 41113, 41221, 41333, 41443, 41549, 41651, 41759, 41863, 41969, 42071, 42179, 42281, 42391, 42499, 42611, 42719, 42821, 42923, 43037, 43151, 43261, 43391, 43499, 43607, 43711, 43853, 43961, 44071, 44179, 44281, 44383, 44491, 44617, 44729, 44839, 44953, 45061, 45179, 45281, 45389, 45491, 45599, 45707, 45817, 45943, 46049, 46153, 46261, 46381, 46489, 46591, 46703, 46807, 46919, 47041, 47143, 47251, 47353, 47459, 47563, 47681, 47791, 47903, 48017, 48119, 48221, 48337, 48449, 48563, 48673, 48779, 48883, 48989, 49103, 49207, 49331, 49433, 49537, 49639, 49741, 49843, 49957, 50069, 50177, 50287, 50411, 50513, 50627, 50741, 50849, 50951, 51059, 51169, 51283, 51407, 51511, 
            51613, 51719, 51827, 51929, 52051, 52153, 52259, 52361, 52489, 52609, 52711, 52813, 52919, 53047, 53149, 53267, 53377, 53479, 53591, 53693, 53813, 53917, 54037, 54139, 54251, 54361, 54469, 54577, 54679, 54787, 54907]
        a = 0
        p = 0
        random.seed(time.time())

        while a == p:
            a = primes[random.randint(0, len(primes))]
            p = primes[random.randint(0, len(primes))]

        return a, p

    def encrypt(self, raw):
        raw = self._pad(raw)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.b64encode(iv + cipher.encrypt(raw.encode()))

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:AES.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')

    def _pad(self, s):
        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)

    @staticmethod
    def _unpad(s):
        return s[:-ord(s[len(s)-1:])]